import os
import subprocess
import json
import config
from players import Player
from match import Match
import helpers


class Replay:
    @staticmethod
    def find_replays():
        replay_dirs = []
        for subdir, dirs, files in os.walk(config.AUTOSAVE_LOCATION):
            for file in files:
                filepath = f"{subdir}{os.sep}{file}"
                if filepath.endswith(".rep"):
                    replay_dirs.append(f"\"{filepath}\"")
        return replay_dirs

    @staticmethod
    def parse_replay(replay_path):
        command = f"{config.PATH} -map {replay_path}"
        cmd_stdout = subprocess.check_output(
            command, shell=True, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL)

        return json.loads(cmd_stdout)

    @staticmethod  # can still be extended for multiple players which can be auto-insterted into the match object
    def get_player_from_replay(match_as_json, index):
        name = match_as_json['Header']['Players'][index]["Name"]
        race = match_as_json['Header']['Players'][index]['Race']['Name']
        apm = match_as_json['Computed']['PlayerDescs'][index]['APM']
        eapm = match_as_json['Computed']['PlayerDescs'][index]['EAPM']
        stats = match_as_json['Header']['Players'][index]
        player_team = match_as_json['Header']['Players'][index]['Team']

        winner_team = match_as_json['Computed']['WinnerTeam']
        match_outcome = Replay.assign_match_outcome_to_player(
            player_team, winner_team)

        return Player(name, race, apm, eapm, stats, player_team, match_outcome)

    @staticmethod
    def get_match_from_replay(match_as_json, players):
        # map names tend to have funky control characters in them that we need to strip
        map_name = match_as_json['MapData']['Name'].encode(
            "ascii", "ignore").decode('utf-8')
        map_description = match_as_json['MapData']['Description']
        match_type = match_as_json['Header']['Type']['Name']

        date = match_as_json['Header']['StartTime']
        match_date = helpers.format_date(date)

        winner_team = match_as_json['Computed']['WinnerTeam']

        return Match(map_name, map_description, players, match_type, match_date, winner_team)

    '''
    icza's replay parser makes it difficult to tell who the winner due to the fact that the replay might not
    know, meaning only the winner with the winning replay can tell who won
    '''
    @staticmethod
    def assign_match_outcome_to_player(player_team, winner_team):
        if player_team == winner_team:
            return "Win"
        else:
            return "Loss"

    @staticmethod
    def get_match_data(match_as_json):
        my_index, index = Match.get_player_index(
            match_as_json)

        player = Replay.get_player_from_replay(
            match_as_json, my_index)
        opponent = Replay.get_player_from_replay(
            match_as_json, index)

        players = [player, opponent]

        current_match = Replay.get_match_from_replay(
            match_as_json, players)

        return current_match
