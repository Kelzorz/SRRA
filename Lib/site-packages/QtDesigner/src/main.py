import os
import subprocess
import json
import config
import srra
import analysis
import players
import replay
import match
import threading

replay_data = srra.ReplayData()


def threaded_fun(replay_path):
    match_as_json = replay.Replay.parse_replay(replay_path)

    if match.Match.is_valid(match_as_json):

        current_match = replay.Replay.get_match_data(match_as_json)
        replay_data.match_history.insert_match(
            current_match)


def main():

    replay_dirs = replay.Replay.find_replays()

    threads = []

    for replay_path in replay_dirs:
        try:
            t = threading.Thread(
                target=threaded_fun, args=[replay_path])
            t.start()
            threads.append(t)

        except Exception as e:
            replay_data.invalid_replays += 1
            print(e)
            return

    for th in threads:
        th.join()

    replay_data.overall_win_ratio.set_win_ratio_from_match_history(
        replay_data.match_history.match_history)

    replay_data.set_average_apm(replay_data.match_history.match_history)

    replay_data.overall_win_ratio.set_win_ratio_from_match_history(
        replay_data.match_history.match_history)

    replay_data.set_average_eapm(replay_data.match_history.match_history)

    replay_data.matchups.match_outcomes(
        replay_data.match_history.match_history)
        
    return replay_data
