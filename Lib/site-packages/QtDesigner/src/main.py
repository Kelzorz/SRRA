import os
import config
import srra
import analysis
import players
import replay
import match
import graph
import helpers
import threading

replay_data = srra.ReplayData()


def push_current_match_to_replay_data(chunked_replay_dirs):
    for replay_path in chunked_replay_dirs:
        match_as_json = replay.Replay.parse_replay(replay_path)

        if match.Match.is_valid(match_as_json):
            current_match = replay.Replay.get_match_data(match_as_json)
            replay_data.match_history.insert_match(current_match)


def gather_replay_data():
    threads = []

    replay_dirs = replay.Replay.find_replays()
    chunk_size = int(os.cpu_count())
    chunked_replay_dirs = helpers.chunks(replay_dirs, chunk_size)

    for replay_dirs in chunked_replay_dirs:
        try:
            t = threading.Thread(
                target=push_current_match_to_replay_data, args=[replay_dirs])
            t.start()
            threads.append(t)

        except Exception as e:
            replay_data.invalid_replays += 1
            print(e)

    for th in threads:
        th.join()


def calculate_player_stats():
    threads = []

    functions = [
        replay_data.overall_win_ratio.set_win_ratio_from_match_history,
        replay_data.set_average_apm,
        replay_data.set_average_eapm,
        replay_data.matchups.match_outcomes
    ]

    for function in functions:
        thread = threading.Thread(target=function,
                                  args=[replay_data.match_history.match_history])
        thread.start()
        threads.append(thread)

    for th in threads:
        th.join()


def create_graph():
    list_of_apms = replay_data.match_history.get_list_of_apms()
    apm_graph = graph.Graph(list_of_apms)
    apm_graph.generate_apm_graph()


def main():
    gather_replay_data()
    calculate_player_stats()
    create_graph()

    return replay_data
