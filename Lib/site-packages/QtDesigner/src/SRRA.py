import os
import subprocess
import json
from configsettings import *
import players
import statistics
import replay
import match
import threading
import time


if __name__ != "__main__":
	class Data:
		def get_data():
			wins = 0
			matches = 0
			invalid_replays = 0

			win_ratios = {
				'Terran': {
					'TvZ': {
						'tvz_wins': 0,
						'tvz_matches': 0,
						'tvz_ratio': 0
					},
					'TvP': {
						'tvp_wins': 0,
						'tvp_matches': 0,
						'tvp_ratio': 0
					},
					'TvT': {
						'tvt_wins': 0,
						'tvt_matches': 0,
						'tvt_ratio': 0
					}
				},
				'Zerg': {
					'ZvZ': {
						'zvz_wins': 0,
						'zvz_matches': 0,
						'zvz_ratio': 0
					},
					'ZvP': {
						'zvp_wins': 0,
						'zvp_matches': 0,
						'zvp_ratio': 0
					},
					'ZvT': {
						'zvt_wins': 0,
						'zvt_matches': 0,
						'zvt_ratio': 0
					}
				},
				'Protoss': {
					'PvZ': {
						'pvz_wins': 0,
						'pvz_matches': 0,
						'pvz_ratio': 0
					},
					'PvP': {
						'pvp_wins': 0,
						'pvp_matches': 0,
						'pvp_ratio': 0
					},
					'PvT': {
						'pvt_wins': 0,
						'pvt_matches': 0,
						'pvt_ratio': 0
					}
				},
				'overall_win_ratio': ""
			}

			recent_matches = {}
			# for displaying
			match_result = []
			apms = []
			eapms = []
			match_dates = []
			maps = []
			my_usernames = []
			# initializing for the statistics page
			average_apm = 0
			average_eapm = 0

			match_history = {
				'Players': {
					'Name': [],
					'Race': []
				}
			}
			invalid_replays = 0
			for subdir, dirs, files in os.walk(AUTOSAVE_LOCATION):
				for file in files:
					filepath = f"{subdir}{os.sep}{file}"
					if filepath.endswith(".rep"):
						try:
							match_as_json = replay.Replay.parseReplay(filepath)
							# print(match_as_json)
							# checks if this is a 1v1 match
							if match.Match.isOneVSOne(match_as_json):

								my_index, index = match.Match.getPlayerIndex(
									match_as_json, YOUR_LADDER_NAMES)

								if match_as_json['Header']['Players'][my_index]['Name'] in YOUR_LADDER_NAMES:

									you = replay.Replay.getPlayerFromReplay(
										match_as_json, my_index)
									opponent = replay.Replay.getPlayerFromReplay(
										match_as_json, index)

									match_history['Players']['Name'].append(
										opponent.username)
									match_history['Players']['Race'].append(
										opponent.race)

									my_usernames.append(you.username)

									my_team = you.stats['Team']

									# statistics
									current_match = replay.Replay.getMatchFromReplay(
										match_as_json)
									matches += 1

									maps.append(current_match.map_name)
									match_dates.append(
										current_match.match_date)

									apms.append(you.apm)
									eapms.append(you.eapm)

									if my_team == current_match.match_winner:
										match_result.append("Win")
									else:
										match_result.append("Loss")

									#statistics.Statistics.match_outcome(you.race, opponent.race, current_match.match_winner, my_team)
									
									'''
									tvx, zvx, pvx, overall_win_ratio = Statistics.winRatios(
										win_ratios)
									tvt_ratio, tvz_ratio, tvp_ratio = tvx
									zvt_ratio, zvz_ratio, zvp_ratio = zvx
									pvt_ratio, pvz_ratio, pvp_ratio = pvx
									'''

						except Exception as e:
							invalid_replays += 1
							print(e)
							return

			# average_apm = sum(apms)/len(apms)
			# average_eapm = sum(eapms)/len(eapms)
			number_of_rows = len(match_history['Players']['Name'])
