import subprocess
# from initializations import *
from configsettings import *
import json
"""
	A class used to represent an SCR Player within a replay
"""


class Player:
	def __init__(self, username, race, apm, eapm, stats):
		self.username = username
		self.race = race
		self.apm = apm
		self.eapm = eapm
		self.stats = stats

	def show(self):
		return(f"{self.username} - {self.race} - {self.apm} - {self.eapm} - {self.stats}")

	def attributes(self):
		return [vars(self)[i] for i in vars(self)]


"""
	A class used to represent a pog SCR match
"""


class Match:
	def __init__(self, map_name, match_date, match_winner):

		self.map_name = map_name
		self.match_winner = match_winner
		self.match_date = match_date

	def show(self):
		return self.name

	def attributes(self):
		return [vars(self)[i] for i in vars(self)]

	@staticmethod
	def parseReplay(filepath):
		replay_filepath = filepath.replace("./", "\\")
		command = f"{PATH} -map \"{replay_filepath}\""
		cmd_stdout = subprocess.check_output(
			command, shell=True, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL)
		return json.loads(cmd_stdout)

	@staticmethod
	def isOneVSOne(match_as_json):
		return (len(match_as_json['Header']['Players']) == 2  # if it's a 1v1 match
				# if the type is Top vs Bottom
				and match_as_json['Header']['Type']['Name'] == "Top vs Bottom"
				and match_as_json['Header']['Type']['ID'] == 15)

	@staticmethod
	def getPlayerIndex(match_as_json, YOUR_LADDER_NAMES):
		if match_as_json['Header']['Players'][0]['Name'] in YOUR_LADDER_NAMES:
			my_index = 0
			index = 1
		else:
			my_index = 1
			index = 0

		return (my_index, index)


class Replay:
	@staticmethod
	def getPlayerFromReplay(match_as_json, index):
		race = match_as_json['Header']['Players'][index]['Race']['Name']
		name = match_as_json['Header']['Players'][index]["Name"]
		stats = match_as_json['Header']['Players'][index]
		apm = match_as_json['Computed']['PlayerDescs'][index]['APM']
		eapm = match_as_json['Computed']['PlayerDescs'][index]['EAPM']

		return Player(name, race, apm, eapm, stats)

	@staticmethod
	def getMatchFromReplay(match_as_json):
		map_name = match_as_json['Header']['Map']
		match_date = match_as_json['Header']['StartTime']
		match_winner = match_as_json['Computed']['WinnerTeam']

		return Match(map_name, match_date, match_winner)


class Statistics:
	@staticmethod
	def match_outcome():
		if opponent.race == 'Terran':
			if you.race == 'Terran':
				if my_team == current_match.match_winner:
					wins += 1
					tvt_wins += 1
				tvt_matches += 1
			elif you.race == 'Zerg':
				if my_team == current_match.match_winner:
					wins += 1
					zvt_wins += 1
				zvz_matches += 1
			else:
				if my_team == current_match.match_winner:
					wins += 1
					pvt_wins += 1
				pvz_matches += 1

		elif opponent.race == 'Zerg':
			if you.race == 'Terran':
				if my_team == current_match.match_winner:
					wins += 1
					tvz_wins += 1
				tvz_matches += 1
			elif you.race == 'Zerg':
				if my_team == current_match.match_winner:
					wins += 1
					zvz_wins += 1
				zvz_matches += 1
			else:
				if my_team == current_match.match_winner:
					wins += 1
					pvz_wins += 1
				pvz_matches += 1

		else:  # his race is protoss
			if you.race == 'Terran':
				if my_team == current_match.match_winner:
					wins += 1
					tvp_wins += 1
				tvp_matches += 1
			elif you.race == 'Zerg':
				if my_team == current_match.match_winner:
					wins += 1
					zvp_wins += 1
				zvz_matches += 1
			else:
				if my_team == current_match.match_winner:
					wins += 1
					pvp_wins += 1
				pvz_matches += 1

	@staticmethod
	def calculate_win_ratios(win_ratios):
		win_ratio = f"{round(wins/matches*100)}%"
		# terran
		if win_ratios['tvz_matches'] == 0:
			win_ratios['tvz_ratio'] = ""
		else:
			win_ratios['tvz_ratio'] = f"{tvz_wins/tvz_matches*100}%"

		if win_ratios['tvp_matches'] == 0:
			win_ratios['tvp_ratio'] = ""
		else:
			win_ratios['tvp_ratio'] = f"{tvp_wins/tvp_matches*100}%"

		if win_ratios['tvt_matches'] == 0:
			win_ratios['tvt_ratio'] = ""
		else:
			win_ratios['tvt_ratio'] = f"{tvt_wins/tvt_matches*100}%"
		# zerg
		if win_ratios['zvz_matches'] == 0:
			win_ratios['zvz_ratio'] = ""
		else:
			win_ratios['zvz_ratio'] = f"{zvz_wins/zvz_matches*100}%"

		if win_ratios['zvp_matches'] == 0:

			win_ratios['zvp_ratio'] = ""
		else:
			win_ratios['zvp_ratio'] = f"{zvp_wins/zvp_matches*100}%"

		if win_ratios['zvt_matches'] == 0:
			win_ratios['zvt_ratio'] = ""
		else:
			win_ratios['zvt_ratio'] = f"{zvt_wins/zvt_matches*100}%"
		# protoss
		if win_ratios['pvz_matches'] == 0:
			win_ratios['pvz_ratio'] = ""
		else:
			win_ratios['pvz_ratio'] = f"{pvz_wins/pvz_matches*100}%"

		if win_ratios['pvp_matches'] == 0:

			win_ratios['pvp_ratio'] = ""
		else:
			win_ratios['pvp_ratio'] = f"{pvp_wins/pvp_matches*100}%"

		if win_ratios['pvt_matches'] == 0:
			win_ratios['pvt_ratio'] = ""
		else:
			win_ratios['pvt_ratio'] = f"{pvt_wins/pvt_matches*100}%"

		tvx = (win_ratios['tvt_ratio'],
			   win_ratios['tvz_ratio'], win_ratios['tvp_ratio'])
		zvx = (win_ratios['zvt_ratio'],
			   win_ratios['zvz_ratio'], win_ratios['zvp_ratio'])
		pvx = (win_ratios['pvt_ratio'],
			   win_ratios['pvz_ratio'], win_ratios['pvp_ratio'])
		return (tvx, zvx, pvx, win_ratio)

